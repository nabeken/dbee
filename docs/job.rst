===============
DbeE ジョブ仕様
===============

.. _Resque: https://github.com/defunkt/resque
.. _Redis: http://redis.io/

DbeEではジョブ管理に Resque_ を使用している。そしてResqueは Redis_ を使用している。

workerは直接Redisサーバと通信できる必要がある。
ジョブの投入は一部ジョブはRESTful API経由でラップしてResqueへ投入する。

ジョブは1つでは完結せず、次に実行すべきジョブの情報を含めて実行されることがある。
ジョブは自身の成果物を見て、次のジョブも前のジョブと同じノードで実行される必要が
あるかどうか判断する。もし、必要があればそのためのフラグを立てる。

そのため、各workerは自身のキューを必ず持つ。同一workerで実行すべきタスクは各worker専用
のキューへ投入する。

流れ
====

ジョブの入口はエンコードの依頼(request)から始まる。依頼の前提:

- 依頼者は素材動画がworkerからアクセス可能なURLを自身で生成できる

依頼にはいくつかの情報を含める必要がある。

- 素材動画のダウンロード方法と場所
- エンコーダーの情報
- エンコーダーの設定
- 成果物のアップロード方法と場所
- 公開処理の情報
- 通知処理の情報
- 素材処理の情報

ジョブの種類
============

workerが担当 (分散する)

    * 素材のダウンロードジョブ (当面はダウンロードジョブとエンコードジョブは1つのジョブとして扱う)
    * 動画のエンコードジョブ (ジョブが完了すると自身のキューにアップロードジョブを投入する)
    
      * 動画の場所
      * 動画のメタデータ
      * キュー先
      * エンコーダーバックエンド
      * エンコードプロファイル
    
    * 成果物のアップロードジョブ (ジョブが完了するとmasterのキューに公開処理ジョブを投入する)

masterが担当 (分散しない)

    * 公開処理ジョブ (当面は以下3つのジョブは1つのジョブとして扱う)
    * 通知処理ジョブ
    * 素材の処理(削除、移動など)

ジョブのクラス名
================

引数はRequest API経由で取得する。

- DBEE::Job::Download (今のところhttpのみ)

  引数
    認証情報とダウンロード先

  出力
    保存先 => output["file"]

- DBEE::Job::Encode (今のところffmpegのみ)

  引数
    ffmpeg用の設定、素材の保存先

  出力
    エンコードされた動画の保存先 => output["file"]

- DBEE::Job::Upload (今のところS3クローンのみ)

  引数
    認証情報とアップロード先、成果物の保存先

  出力
    成果物のアップロード先 => output["url"]

- DBEE::Job::Publish (今のところ特になにもしない)

  引数
    何もしない、成果物のアップロード先

- DBEE::Job::Notification     (今のところメールを送るのみ)

  引数
    メールサーバ情報、メールアドレス、成果物のアップロード先

- DBEE::Job::PostProcess      (今のところ何もしない)

  引数
    何もしない

ジョブ間のインターフェース
==========================

各ジョブは他のジョブの成果物を使い成果物を出力する。
そのため、1つ前のジョブの成果物の所在を得る必要がある。また、自身の成果物の所在を次のジョブへ通知
する必要がある。

ジョブは引数から情報を得るのでジョブが完了したら自身のジョブの成果物の在処を次のジョブの引数へ足す？
次のジョブに入れてしまうと完了したジョブの情報を見ても成果物に関する情報がない。
なので、やはり自身のジョブ情報に入れる。

ジョブが完了するとoutput(ハッシュ)に成果物についての情報を格納する。

Resqueからは以下のようにして引数を渡す。 ::

    Resque.enqueue(DBEE::Job::Encode, request_id, run_list["output"])
